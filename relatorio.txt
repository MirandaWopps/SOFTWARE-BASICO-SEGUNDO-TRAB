15/11 - O trabalho começou antes, mas é o primeiro dia de várias que terei para focar nele. Pretendo acabar em 5 dias :) 

Sei que o trabalho consiste em código, subcategorizado em: preângulo, salvar calle saved, arrumar parâmetro - eis o mais trabalhoso, - "call f", restaurar calle saved e finalizar.
Então, começarei com uma versão assembly visando pegar objdump -d <fileassembly> de:

	.data
	.text
	.globl f 
	f:
	pushq %rbp
	movq %rsp, %rbp
	subq $32, %rsp/*afinal calle saved podem ser 3 ponteiros(24 bytes)*/
	
	leave  /* finalizacao*/
	ret
	
	
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ gcc -Wall -no-pie -c a.o preangulo.s 
gcc: warning: a.o: linker input file unused because linking not done
gcc: error: a.o: linker input file not found: No such file or directory
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ objdump -d preangulo.o

preangulo.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	c9                   	leave
   9:	c3                   	ret
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ 

Vou construir outra funcao para saber como acontecera o call, imagino que existe outra maneirra, mas tempo urge.

soma1.c
  GNU nano 7.2                        soma1.c                                   
int soma1(int a){
        int x = a +1;
return x;


}

================================================= TESTE 2
.data 
Sf2: .string "testandostring\n"
.text
.globl main
main:
  pushq %rbp
  movq %rsp, %rbp
  subq $32, %rsp /*afinal calle saved podem ser 3 ponteiros(24 bytes)*/
 
  movl $5, %edi
  
  
  movq $Sf2, %rdi /* fist param */
  movl $0, %eax
  call printf

  leave  /* finalizacao*/
  ret


lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ objdump -d preangulo.s
objdump: preangulo.s: file format not recognized
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ objdump -d preangulo.o

preangulo.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	bf 05 00 00 00       	mov    $0x5,%edi
   d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
  14:	b8 00 00 00 00       	mov    $0x0,%eax
  19:	e8 00 00 00 00       	call   1e <main+0x1e>
  1e:	c9                   	leave
  1f:	c3                   	ret
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ 
================================================================================
Ok, aprendi: 55 48 89 e5 48 83 ec 20        e8              c9 c3 
                      preangulo         chamar endereco   finalizar

Vou por isso no vetor !
TODO: Calcular off set para as instruções no call serem offset = valor do call + rip.
      Lembrar que esta em hexadecimal, entao preciso converter e passar o menor byte
      para o maior.

Pergunta enviada ao fórum junto de imagem para confirmação do que fazer. Farei teste TDD para garantir a funcionalidade de "preangulo" e "finalizar".



1st TDD a ser registrado: Código escrito
teste.c
#include <stdio.h>
#include "cria_func.h"

typedef int (*func_ptr)(int x);

int mult(int x, int y) {
  return x * y;
}

void dump (void *p, int n) {
  unsigned char *p1 = p;
  while (n--) {
    printf("%p - %02x\n", p1, *p1);
    p1++;
  }
}

int main(void) {
  DescParam params[2];
  func_ptr f_mult;
  int i;
  unsigned char codigo[500];
  
// caracterizar parametros

  params[0].tipo_val = INT_PAR; /* o primeiro parãmetro de mult é int */
  params[0].orig_val = PARAM;   /* a nova função repassa seu parämetro */

  params[1].tipo_val = INT_PAR; /* o segundo parâmetro de mult é int */
  params[1].orig_val = FIX;     /* a nova função passa para mult a constante 10 */
  params[1].valor.v_int = 10;
    
//void cria_func (void* f, DescParam params[], int n, unsigned char codigo[]){    
    cria_func(mult, params, 2 , codigo);
    for (int i=0; i<50 ;i++){
      printf("%x ", codigo[i] );
    }    	
    dump(codigo,50);
    
	return 0;
}


cria_func.c
void cria_func (void* f, DescParam params[], int n, unsigned char codigo[]){
/*              Prologo
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp   */
      codigo[0] = 0x55; 
      codigo[1] = 0x48; codigo[2] = 0x89; codigo[3] = 0xe5;
      codigo[1] = 0x48; codigo[2] = 0x83; codigo[3] = 0xec; codigo[7] = 0x20; 
    /*int i=0, escreve =1; 
    while(escreve){
      i++;
    }*/
    
    codigo[8] = 0xc9;
    codigo[9] = 0xc3;
}

Erro: 
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ ./a
55 48 83 ec 0 0 0 20 c9 c3 0 0 0 0 0 0 28 f2 40 2e 97 7f 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x7ffdc87f63d0 - 55
0x7ffdc87f63d1 - 48
0x7ffdc87f63d2 - 83
0x7ffdc87f63d3 - ec
0x7ffdc87f63d4 - 00
0x7ffdc87f63d5 - 00
0x7ffdc87f63d6 - 00
0x7ffdc87f63d7 - 20
0x7ffdc87f63d8 - c9
0x7ffdc87f63d9 - c3


Solução:
/* Lucas Ebrenz Fernandes Pereira 20011488 3WC */
/* version 0.1 */

//#define DEBUG // comente essa linha para desativar o modo debug.
#include <stdio.h>
#include "cria_func.h"
/**
* Cria funcoes.
* 
* @param f  Tem o endereco da funcao original a ser chamada pelo cod gerado.
* @param params[] array contendo desc dos params para chamar essa func: max 3
* @param n Qnts params estao no array params[].
* @param codigo[] Vetor onde devera ser gravado o codigo gerado.
* @return Essa funcao nao retorna nada.
*/
void cria_func (void* f, DescParam params[], int n, unsigned char codigo[]){
/*              Prologo
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp   */
      codigo[0] = 0x55; 
      codigo[1] = 0x48; codigo[2] = 0x89; codigo[3] = 0xe5;
      codigo[4] = 0x48; codigo[5] = 0x83; codigo[6] = 0xec; codigo[7] = 0x20; 
    /*int i=0, escreve =1; 
    while(escreve){
      i++;
    }*/
    
    
    
    /* Finalizacao */
    codigo[8] = 0xc9;
    codigo[9] = 0xc3;
}





OUTPUT:
lucas@fedora:~/inf1018/SOFTWARE-BASICO-SEGUNDO-TRAB$ ./a
55 48 89 e5 48 83 ec 20 c9 c3 0 0 0 0 0 0 28 f2 42 5d 91 7f 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x7ffc19727bf0 - 55
0x7ffc19727bf1 - 48
0x7ffc19727bf2 - 89
0x7ffc19727bf3 - e5
0x7ffc19727bf4 - 48
0x7ffc19727bf5 - 83
0x7ffc19727bf6 - ec
0x7ffc19727bf7 - 20
0x7ffc19727bf8 - c9
0x7ffc19727bf9 - c3
0x7ffc19727bfa - 00
0x7ffc19727bfb - 00

rEFATORAÇÃO: Vou deixar como está. O comentário será alterado provavelmente agora.



TDD2-> Teste: 




























